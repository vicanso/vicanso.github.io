"use strict";(self.webpackChunkpingap=self.webpackChunkpingap||[]).push([[2992],{401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"plugins/request-id","title":"Request ID","description":"Attaches a unique identifier to each incoming request for distributed tracing, log correlation, and troubleshooting, a key part of enhancing system observability.","source":"@site/docs/plugins/request-id.md","sourceDirName":"plugins","slug":"/plugins/request-id","permalink":"/pingap-en/docs/plugins/request-id","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugins/request-id.md","tags":[],"version":"current","sidebarPosition":97,"frontMatter":{"sidebar_position":97,"title":"Request ID","description":"Attaches a unique identifier to each incoming request for distributed tracing, log correlation, and troubleshooting, a key part of enhancing system observability."},"sidebar":"tutorialSidebar","previous":{"title":"Referer Restriction","permalink":"/pingap-en/docs/plugins/referer-restriction"},"next":{"title":"Response Headers","permalink":"/pingap-en/docs/plugins/response-headers"}}');var i=t(4848),r=t(8453);const l={sidebar_position:97,title:"Request ID",description:"Attaches a unique identifier to each incoming request for distributed tracing, log correlation, and troubleshooting, a key part of enhancing system observability."},a="Request ID Plugin",c={},d=[{value:"Feature Introduction",id:"feature-introduction",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Access Effects",id:"access-effects",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"request-id-plugin",children:"Request ID Plugin"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"request-id"})," plugin is an observability plugin whose core function is to ensure that ",(0,i.jsx)(n.strong,{children:"every"})," request passing through Pingap has a ",(0,i.jsx)(n.strong,{children:"unique identifier"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"feature-introduction",children:"Feature Introduction"}),"\n",(0,i.jsx)(n.p,{children:"In complex distributed systems or microservices architectures, a single user request may flow through multiple services. Without a unified identifier to link these calls together, tracing and locating the point of failure becomes extremely difficult when issues arise."}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"request-id"})," plugin solves this problem in the following way:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Check Incoming Request"}),": The plugin first checks if a request ID ",(0,i.jsx)(n.strong,{children:"already exists"})," in the request headers (for example, generated by another upstream gateway or the client). If it exists, the plugin will ",(0,i.jsx)(n.strong,{children:"respect and use"})," this ID to ensure the integrity of the trace."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Generate New ID"}),": If a request ID is ",(0,i.jsx)(n.strong,{children:"not present"})," in the headers, the plugin will automatically ",(0,i.jsx)(n.strong,{children:"generate a new unique ID"})," based on the algorithm you configure."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inject Request Header"}),": The plugin will inject this ID (whether it's the existing one or a newly generated one) into a specified HTTP request header (defaulting to ",(0,i.jsx)(n.code,{children:"X-Request-ID"}),") before forwarding the request to the upstream service."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This way, from the gateway to all backend services, you can use the same ID to correlate logs and trace call chains, allowing for rapid problem diagnosis."}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Distributed Tracing"}),": This is the most critical use case. All services (gateway, business APIs, database proxies, etc.) should record the ",(0,i.jsx)(n.code,{children:"X-Request-ID"})," in their logs. When an issue occurs, you can simply filter by this ID to get the complete log record of that request across all services."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Troubleshooting and Debugging"}),": When a user reports an issue, you can ask them to find the ",(0,i.jsx)(n.code,{children:"X-Request-ID"})," of the corresponding failed request in their browser's developer tools. With this ID, you can pinpoint the relevant error information in a massive volume of logs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Correlating Logs and Metrics"}),": By using the request ID as a label in logs and monitoring metrics (like Prometheus), you can correlate specific log entries with high-level performance metrics for more in-depth analysis."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["Configuration is done in the ",(0,i.jsx)(n.code,{children:"plugin.request-id.toml"})," file."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Parameter"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Required"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Default"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"algorithm"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"String"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"No"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"uuid_v7"'})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The algorithm used when generating a new ID. Possible values are:",(0,i.jsx)("br",{}),"\u2022 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:'"uuid_v7"'})}),": Generates a time-based UUID v7. Its ordered nature is very friendly for database indexing and log sorting.",(0,i.jsx)("br",{}),"\u2022 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:'"nanoid"'})}),": Generates a shorter, URL-safe random string."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"size"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Integer"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"No"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"8"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["Only effective when ",(0,i.jsx)(n.code,{children:"algorithm"})," is ",(0,i.jsx)(n.code,{children:'"nanoid"'}),". Specifies the length of the generated ID."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"header_name"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"String"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"No"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:'"X-Request-ID"'})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The name of the HTTP request header used to carry the request ID. You can customize this according to your team's standards (e.g., ",(0,i.jsx)(n.code,{children:"Trace-Id"}),")."]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),": Add a unique request ID to all API requests passing through Pingap for subsequent log tracing. We will choose the ",(0,i.jsx)(n.code,{children:"nanoid"})," algorithm to generate a 12-character ID and use ",(0,i.jsx)(n.code,{children:"X-Trace-ID"})," as the header name."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Configure the plugin (",(0,i.jsx)(n.code,{children:"plugin.request-id-api.toml"}),")"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# Use the nanoid algorithm\nalgorithm = "nanoid"\n\n# Set the generated ID length to 12\nsize = 12\n\n# Use a custom header name\nheader_name = "X-Trace-ID"\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Apply the plugin in a Location (",(0,i.jsx)(n.code,{children:"location.toml"}),")"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# location.toml\n[locations.route-for-api]\n# Match all API requests\npath = "/api/"\nupstream = "api-backend"\nplugins = [\n    # Place the Request ID plugin first to ensure the ID is generated as early as possible\n    "request-id-api",\n    # ... other plugins\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"access-effects",children:"Access Effects"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 1: A client initiates a new request"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A client sends ",(0,i.jsx)(n.code,{children:"GET /api/users"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Pingap's ",(0,i.jsx)(n.code,{children:"request-id-api"})," plugin checks and finds no ",(0,i.jsx)(n.code,{children:"X-Trace-ID"})," in the request headers."]}),"\n",(0,i.jsxs)(n.li,{children:["The plugin generates a new 12-character nanoid, for example, ",(0,i.jsx)(n.code,{children:"Abc123Def456"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The plugin ",(0,i.jsx)(n.strong,{children:"adds"})," the ",(0,i.jsx)(n.code,{children:"X-Trace-ID: Abc123Def456"})," header to the request."]}),"\n",(0,i.jsxs)(n.li,{children:["Finally, the ",(0,i.jsx)(n.code,{children:"api-backend"})," service receives the request containing this ",(0,i.jsx)(n.code,{children:"X-Trace-ID"})," header and can record it in its logs."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 2: The request already includes an ID"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Another upstream service (like a frontend gateway) has already generated an ID and sends a request to Pingap with the header ",(0,i.jsx)(n.code,{children:"X-Trace-ID: upstream-generated-id-789"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Pingap's ",(0,i.jsx)(n.code,{children:"request-id-api"})," plugin checks and finds that the ",(0,i.jsx)(n.code,{children:"X-Trace-ID"})," header ",(0,i.jsx)(n.strong,{children:"already exists"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The plugin will ",(0,i.jsx)(n.strong,{children:"not"})," generate a new ID, but will use the existing ",(0,i.jsx)(n.code,{children:"upstream-generated-id-789"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The value of ",(0,i.jsx)(n.code,{children:"X-Trace-ID"})," in the request received by the ",(0,i.jsx)(n.code,{children:"api-backend"})," service will still be ",(0,i.jsx)(n.code,{children:"upstream-generated-id-789"}),", maintaining the continuity of the trace."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);