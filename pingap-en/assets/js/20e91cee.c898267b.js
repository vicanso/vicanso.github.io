"use strict";(self.webpackChunkpingap=self.webpackChunkpingap||[]).push([[293],{2095:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"plugins/sub-filter","title":"Content Substitution (Sub Filter)","description":"Perform real-time find-and-replace on response body content. Supports simple string substitution and powerful regular expression replacement for dynamically modifying HTML, JSON, or other text content.","source":"@site/docs/plugins/sub-filter.md","sourceDirName":"plugins","slug":"/plugins/sub-filter","permalink":"/pingap-en/docs/plugins/sub-filter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/plugins/sub-filter.md","tags":[],"version":"current","sidebarPosition":99,"frontMatter":{"sidebar_position":99,"title":"Content Substitution (Sub Filter)","description":"Perform real-time find-and-replace on response body content. Supports simple string substitution and powerful regular expression replacement for dynamically modifying HTML, JSON, or other text content."},"sidebar":"tutorialSidebar","previous":{"title":"Response Headers","permalink":"/pingap-en/docs/plugins/response-headers"},"next":{"title":"Traffic Splitting","permalink":"/pingap-en/docs/plugins/traffic-splitting"}}');var i=s(4848),l=s(8453);const r={sidebar_position:99,title:"Content Substitution (Sub Filter)",description:"Perform real-time find-and-replace on response body content. Supports simple string substitution and powerful regular expression replacement for dynamically modifying HTML, JSON, or other text content."},o="Content Substitution (Sub Filter) Plugin",c={},d=[{value:"Feature Introduction",id:"feature-introduction",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Configuration Parameters",id:"configuration-parameters",level:2},{value:"Filter Rule (<code>filters</code>) Syntax",id:"filter-rule-filters-syntax",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Access Effects",id:"access-effects",level:3},{value:"Analysis of Sub Filter Processing:",id:"analysis-of-sub-filter-processing",level:3},{value:"Precautions",id:"precautions",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"content-substitution-sub-filter-plugin",children:"Content Substitution (Sub Filter) Plugin"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"sub-filter"})," plugin is a powerful response body processing plugin that allows you to ",(0,i.jsx)(n.strong,{children:"perform real-time find-and-replace operations on response body content"})," before it is sent to the client."]}),"\n",(0,i.jsx)(n.h2,{id:"feature-introduction",children:"Feature Introduction"}),"\n",(0,i.jsx)(n.p,{children:"This plugin intervenes at the response phase, streaming the response body from the upstream service and modifying its content based on a series of filter rules you define. It supports two core substitution modes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["String Substitution (",(0,i.jsx)(n.code,{children:"sub_filter"}),")"]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Performs a simple, case-sensitive text find-and-replace."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Regular Expression Substitution (",(0,i.jsx)(n.code,{children:"subs_filter"}),")"]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Uses regular expressions for more complex, pattern-based find-and-replace operations."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For both modes, you can use flags to control the substitution behavior, such as performing a ",(0,i.jsx)(n.strong,{children:"global replacement"})," or ",(0,i.jsx)(n.strong,{children:"ignoring case"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Dynamically Modifying HTML Content"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protocol Substitution"}),": Replace all hardcoded ",(0,i.jsx)(n.code,{children:"http://"})," links in HTML with ",(0,i.jsx)(n.code,{children:"https://"})," to fix mixed content security warnings."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Script Injection"}),": Automatically inject web analytics scripts (like Google Analytics) or custom JavaScript/CSS before the ",(0,i.jsx)(n.code,{children:"</body>"})," tag."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Environment Adaptation"}),": Dynamically replace API endpoints in the backend's response that point to a staging environment (",(0,i.jsx)(n.code,{children:"staging.api.com"}),") with the production environment's address (",(0,i.jsx)(n.code,{children:"api.com"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Adjusting API Responses"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Field Renaming"}),": Rename an old JSON field in an API response to a new name to maintain compatibility with newer clients, without modifying backend code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Masking"}),": Replace password or key fields in responses containing sensitive information (like logs or debug info) with ",(0,i.jsx)(n.code,{children:"***"})," before sending them to a pre-production environment."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["Configuration is done in the ",(0,i.jsx)(n.code,{children:"plugin.sub-filter.toml"})," file."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Parameter"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Required"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"path"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"String"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Yes"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"(Required)"})," A regular expression to match the request's URL ",(0,i.jsx)(n.strong,{children:"path"}),". Only responses to requests with a matching path will be processed by this plugin."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"filters"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Array of Strings"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Yes"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"(Required)"})," A list containing one or more ",(0,i.jsx)(n.strong,{children:"filter rules"}),". The rules are executed sequentially in the order they appear in the list."]})]})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"filter-rule-filters-syntax",children:["Filter Rule (",(0,i.jsx)(n.code,{children:"filters"}),") Syntax"]}),"\n",(0,i.jsxs)(n.p,{children:["Each filter rule is a string that follows a specific format: ",(0,i.jsx)(n.code,{children:"<type> '<pattern>' '<replacement>' [flags]"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"<type>"})}),": The rule type, which must be ",(0,i.jsx)(n.code,{children:"sub_filter"})," or ",(0,i.jsx)(n.code,{children:"subs_filter"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'<pattern>'"})}),": The content to find. For ",(0,i.jsx)(n.code,{children:"sub_filter"}),", it's a plain string; for ",(0,i.jsx)(n.code,{children:"subs_filter"}),", it's a regular expression. ",(0,i.jsx)(n.strong,{children:"Must be enclosed in single quotes"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"'<replacement>'"})}),": The new content to replace with. ",(0,i.jsx)(n.strong,{children:"Must be enclosed in single quotes"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"[flags]"})})," (Optional): One or more flags to modify the matching behavior:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"g"}),": ",(0,i.jsx)(n.strong,{children:"Global"})," replacement. Replaces all matches, not just the first one."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"i"}),": ",(0,i.jsx)(n.strong,{children:"Ignore Case"})," matching. Only effective for ",(0,i.jsx)(n.code,{children:"subs_filter"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal"}),": We have a legacy backend service that hardcodes some ",(0,i.jsx)(n.code,{children:"http://"})," links and a path to an old CSS file in the HTML pages it returns. We want to use Pingap to fix these issues without modifying the backend code."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Configure the plugin (",(0,i.jsx)(n.code,{children:"plugin.sub-filter-legacy-fix.toml"}),")"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:"# Only apply to pages that return HTML (assuming they are all under the /legacy/ path)\npath = \"^/legacy/\"\n\n# Define a set of filter rules\nfilters = [\n  # Rule 1: Globally and case-insensitively replace all http:// with https://\n  \"subs_filter 'http://' 'https://' gi\",\n  \n  # Rule 2: Replace the old CSS file path with a new CDN path\n  \"sub_filter '/static/css/old-style.css' '[https://cdn.example.com/assets/new-style.css](https://cdn.example.com/assets/new-style.css)' g\"\n]\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Apply the plugin in a Location (",(0,i.jsx)(n.code,{children:"location.toml"}),")"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# location.toml\n[locations.legacy-route]\npath = "/legacy/"\nupstream = "legacy-backend"\nplugins = [\n    "sub-filter-legacy-fix",\n]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"access-effects",children:"Access Effects"}),"\n",(0,i.jsxs)(n.p,{children:["Let's assume the backend service (",(0,i.jsx)(n.code,{children:"legacy-backend"}),") returns the following original HTML content for a request to ",(0,i.jsx)(n.code,{children:"/legacy/index.html"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n<head>\n  <link rel="stylesheet" href="/static/css/old-style.css">\n</head>\n<body>\n  <p>Welcome! Visit our main site at <a href="[http://my-company.com](http://my-company.com)">My Company</a>.</p>\n  <img src="HTTP://[my-company.com/logo.png](https://my-company.com/logo.png)">\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(n.p,{children:"After being processed by the sub-filter-legacy-fix plugin, the final HTML received by the client will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n<head>\n  <link rel="stylesheet" href="[https://cdn.example.com/assets/new-style.css](https://cdn.example.com/assets/new-style.css)">\n</head>\n<body>\n  <p>Welcome! Visit our main site at <a href="[https://my-company.com](https://my-company.com)">My Company</a>.</p>\n  <img src="[https://my-company.com/logo.png](https://my-company.com/logo.png)">\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"analysis-of-sub-filter-processing",children:"Analysis of Sub Filter Processing:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Both ",(0,i.jsx)(n.code,{children:"http://"})," and ",(0,i.jsx)(n.code,{children:"HTTP://"})," were successfully replaced with ",(0,i.jsx)(n.code,{children:"https://"})," (due to subs_filter and the i flag)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"/static/css/old-style.css"})," was successfully replaced with the CDN address (due to sub_filter)."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"precautions",children:"Precautions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Performance: Regular expression substitution (subs_filter) consumes more CPU resources than simple string substitution (sub_filter). Prioritize using sub_filter and only use regular expressions when necessary."}),"\n",(0,i.jsx)(n.li,{children:"Content Modification: This plugin modifies the response body. Therefore, it will automatically remove the Content-Length response header and use Transfer-Encoding: chunked to send the response."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);